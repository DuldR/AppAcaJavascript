{"version":3,"sources":["./frontend/api_util.js","./frontend/follow_toggle.js","./frontend/infinite_tweets.js","./frontend/tweet_compose.js","./frontend/users_search.js","webpack/bootstrap","./frontend/twitter.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,yB;;;;;;;;;;AC3CA,aAAa,mBAAO,CAAC,6CAAe;;AAEpC;AACA;;;;;;AAMA;AACA;;;AAGA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA,aAAa;AACb;;;;AAIA;;AAEA;;AAEA,8B;;;;;;;;;;ACpEA,aAAa,mBAAO,CAAC,6CAAe;;AAEpC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;;;AAGZ;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,YAAY;AACZ;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4BAA4B;AACjE,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,gC;;;;;;;;;;ACxEA,aAAa,mBAAO,CAAC,6CAAe;;AAEpC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;;AAIA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;;AAET;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,6BAA6B;;AAEpE;AACA;AACA;;AAEA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,2EAA2E,IAAI,kDAAkD;;AAEjI,uDAAuD,IAAI;;AAE3D;AACA,mDAAmD,WAAW,IAAI,SAAS;AAC3E,SAAS;AACT;;AAEA;;AAEA,8B;;;;;;;;;;AC7GA,aAAa,mBAAO,CAAC,6CAAe;AACpC,qBAAqB,mBAAO,CAAC,uDAAoB;;AAEjD;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;;AAEA;AACA;AACA;AACA,6EAA6E,OAAO;;AAEpF,yDAAyD,aAAa;AACtE,yCAAyC,0CAA0C;AACnF,SAAS;;AAET;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;;;;AAIA;;AAEA,6B;;;;;;UClDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;ACrBA,qBAAqB,mBAAO,CAAC,uDAAoB;AACjD,oBAAoB,mBAAO,CAAC,qDAAmB;AAC/C,qBAAqB,mBAAO,CAAC,uDAAoB;AACjD,uBAAuB,mBAAO,CAAC,2DAAsB;;AAErD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;;AAGL,CAAC,C","file":"bundle.js","sourcesContent":["const APIUtil = {\n\n\n    followUser: id => APIUtil.changeStatus(id, \"POST\"),\n\n    unfollowUser: id => APIUtil.changeStatus(id, \"DELETE\"),\n\n    changeStatus: (id, method) => (\n        $.ajax({\n            url: \"/users/\" + id + \"/follow\",\n            dataType: \"json\",\n            method\n        })\n    ),\n\n    searchUsers: (queryVal) => (\n        $.ajax({\n            url: \"/users/search\",\n            dataType: 'json',\n            data: queryVal\n        })\n    ),\n\n    createTweet: (form) => (\n        $.ajax({\n            url: \"/tweets\",\n            dataType: \"json\",\n            method: \"POST\",\n            data: form\n        })\n    ),\n\n    fetchTweet: (req) => (\n        $.ajax({\n            url: \"/feed\",\n            dataType: \"json\",\n            data: {\n                max_created_at: req\n            }\n        })\n    )\n};\n\nmodule.exports = APIUtil;","const util = require(\"./api_util.js\");\n\nclass FollowToggle {\n    constructor($el, options) {\n\n\n \n\n\n        this.$ele = $($el);\n        this.userId = this.$ele.data(\"user-id\") || options.userId;\n\n  \n        if (this.$ele.data(\"initial-follow-state\") === undefined) {\n            this.followState = options.followState;\n        } else {\n            this.followState = this.$ele.data('initial-follow-state');\n        }\n\n        this.render();\n\n        // This works.\n        this.$ele.on(\"click\", this.handleClick.bind(this))\n    \n    }\n\n\n    render() {\n        \n        if (this.followState === true) {\n            this.$ele.text(\"Unfollow!\");\n        } else {\n            this.$ele.text(\"Follow!\")\n        }\n\n        this.$ele.prop('disabled', false);\n    }\n\n\n    handleClick(e) {\n\n        // Got to have this otherwise util will use the globalthis\n        const followToggle = this;\n\n        this.$ele.prop('disabled', true);\n    \n        e.preventDefault();\n\n        if (this.followState === true) {\n            util.unfollowUser(this.userId).then(() => {\n                followToggle.followState = (!followToggle.followState)\n                followToggle.render();\n                \n            })\n        } else if (this.followState === false) {\n            util.followUser(this.userId).then(() => {\n                followToggle.followState = (!followToggle.followState)\n                followToggle.render();\n                \n            })\n        }\n\n        \n\n    }\n\n}\n\nmodule.exports = FollowToggle;","const util = require(\"./api_util.js\");\n\nclass InfiniteTweets {\n\n    constructor ($ele) {\n\n        // DOM Selector\n        this.$ele = $($ele);\n        this.$feed = $($ele).find(\"ul.feed\");\n\n        // Event Handler\n        this.$ele.find('a.fetch-more').on('click', this.fetchTweets.bind(this));\n\n        // custom handler?\n        // On takees the FIRST FUCKING ARGUMENT as the event. The params can then be set after that.\n        // this.$feed.on('insert-tweet', function(evt, prm) {\n        //     console.log(prm);\n        //     this.insertTweets;\n        // });\n\n\n        this.$feed.on('insert-tweet', (evt, prm) => {\n            this.insertTweets([prm]);\n        })\n\n        // Limit Tweets\n        this.maxCreatedAt = null;\n    \n    }\n\n\n    fetchTweets () {\n\n    //     if (this.maxCreatedAt !== null) {\n    //         util.fetchTweet(this.maxCreatedAt).then((data) => {\n    //             this.insertTweets(data);\n    //             this.maxCreatedAt = data[data.length - 1].created_at;\n    //             this.enoughTweets();\n    //         })\n    //     } else {\n    //         util.fetchTweet().then((data) => {\n    //             this.insertTweets(data);\n    //             this.maxCreatedAt = data[data.length - 1].created_at;\n    //             this.enoughTweets();\n    //         })\n            \n    //     }\n    }\n\n    insertTweets (tweet) {\n        console.log(tweet);\n        this.maxCreatedAt = tweet[tweet.length - 1].created_at;\n        console.log(this.maxCreatedAt);\n        tweet.forEach((ele) => {\n            this.$feed.append(`<li>${JSON.stringify(ele.content)}</li>`);\n        })\n\n    }\n\n    enoughTweets () {\n    \n        let len = this.$feed.find('li').length;\n        console.log(len);\n        if (len > 5) {\n            this.$ele.find('a.fetch-more').text(\"No More Tweets\");\n            this.$ele.find('a.fetch-more').off('click');\n        }\n        \n    }\n\n}\n\nmodule.exports = InfiniteTweets;","const util = require(\"./api_util.js\");\n\nclass TweetCompose {\n\n    constructor($el) {\n\n        // This is terrible.\n        this.$ele = $($el);\n        this.$ul = $('ul.feed');\n\n        this.$textArea = this.$ele.find('textarea');\n        this.$charLeft = this.$ele.find('.chars-left');\n\n        \n\n        this.$addMent = this.$ele.find('.add-mention');\n\n        \n        this.$textArea.on('input', this.handleInput.bind(this));\n        this.$ele.on(\"submit\", this.handleSubmit.bind(this));\n        this.$addMent.on('click', this.handleClick.bind(this));\n\n\n        // This works.\n        this.$ele.on('click', '.remove-mentioned-user', event => {\n            $(event.currentTarget).parent().remove();\n        })\n\n    }\n\n\n    // Update feed with new tweet\n    handleSubmit(e) {\n\n        e.preventDefault();\n        this.submit();\n    }\n\n    // Tweet character length\n    handleInput(e) {\n        e.preventDefault();\n        this.renderChar();\n    }\n\n    handleClick(e) {\n        e.preventDefault();\n        this.newUserSelect();\n\n    }\n\n    renderChar() {\n        this.$charLeft.empty();\n        let userEntry = this.$textArea.val().length\n        this.$charLeft.append((140 - userEntry) + \" characters left.\");\n    }\n\n    submit() {\n        let serialized = this.$ele.serializeJSON();\n        this.$ele.children(':input').prop('disabled', true);\n        this.$ele.find(':submit').val(\"Posting\");\n\n        util.createTweet(serialized).then((data) => {\n            this.clearInput();\n            this.enable();\n            // Use this to append to the top of the ul feed.\n            // this.$ul.prepend(`<li>${JSON.stringify(data.content)}</li>`);\n\n            // This shit is wild. It utilizes inifnite tweets event handler. DRY it uP!!!!!\n            // this.$ul.trigger(\"insert-tweet\", data);\n            this.$ul.trigger(\"insert-tweet\", [data]);\n            \n        });\n        \n    }\n\n    enable() {\n        this.$ele.find(':submit').val(\"Post Tweet\");\n        this.$ele.children(':input').prop('disabled', false);\n    }\n\n    clearInput() {\n        this.$ele.find('textarea').val(\"\");\n        this.$ele.find('select').val(\"\");\n        this.$ele.find('.mentioned-users').empty();\n    }\n\n\n    // Mentions\n\n    newUserSelect() {\n        let users = window.users;\n\n        // Pointer for finding created element. I dont know how to append to just created element :)\n        // Easier way to do this. Just map the user options and plug that in to a new html block\n\n        let num = this.$ele.find('label').length;\n        \n        // Better to set a constant to html and feed it in as a string.\n        this.$ele.find('.mentioned-users').append(`<label class='mention-${num} added-mention'>Mention <div><a href='javascript:;' class='remove-mentioned-user'>Remove?</a>  <select name='tweet[mentioned_user_ids][]'><option> </option></select></div></label>`);\n\n        let mentionOption = this.$ele.find(`.mention-${num}`).find('select');\n\n        $.each(users, function(idx, ele) {\n            mentionOption.append(`<option value='${ele.userId}'>${ele.name}</option>`)\n        })\n    }\n\n}\n\nmodule.exports = TweetCompose;","const util = require(\"./api_util.js\");\nconst FollowToggle = require(\"./follow_toggle.js\");\n\nclass UsersSearch {\n\n    constructor($el) {\n        this.$ele = $($el);\n        this.$input = $($el).find(\"input\");\n        this.$ul = $($el).find(\"ul.users\");\n\n\n        // This is working.\n        // this.$input.on('input', function() {\n        //     alert(\"I've gotten it\");\n        // })\n\n        this.$ele.on(\"input\", this.handleInput.bind(this));\n    }\n\n    renderResults(data) {\n        data.forEach(ele => {\n            console.log(ele);\n            this.$ul.append(\"<li>\" + `<a href='http://localhost:3000/users/${ele.id}'>` + ele.username + '</a><br><button></button></li>')\n \n            let buttonEle = this.$ul.find(`li:contains(${ele.username})`).find('button')\n            new FollowToggle(buttonEle, {userId: ele.id, followState: ele.followed});\n        })\n\n        this.$ul.find(\"li\").each((idx, ele) => {\n            console.log(ele);\n        })\n    }\n\n    handleInput(e) {\n\n        const input = this;\n\n        e.preventDefault();\n\n        this.$ul.empty();\n\n        util.searchUsers(this.$input).then((data) => {\n            this.renderResults(data);\n        })\n    }\n\n\n\n}\n\nmodule.exports = UsersSearch;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const FollowToggle = require('./follow_toggle.js');\nconst UsersSearch = require('./users_search.js');\nconst TweetCompose = require('./tweet_compose.js');\nconst InfiniteTweets = require('./infinite_tweets.js');\n\nconsole.log(\"Webpack work\");\n\n$(() => {\n    // This collects all of the buttons\n    const rootEl = $(\"button.follow-toggle\");\n\n    // this collects all of the user searchs\n    const userEl = $(\"nav.users-search\");\n\n    // grab the tweet-compose form\n    const composeEl = $(\"form.tweet-compose\");\n\n    // grab infinite feed\n    const feedEl = $(\"div.infinite-feed\");\n\n    \n    rootEl.each(function(idx, ele) {\n        new FollowToggle(ele);\n    })\n\n    userEl.each(function(idx, ele) {\n        new UsersSearch(ele);\n    })\n\n    composeEl.each(function(idx, ele) {\n        new TweetCompose(ele);\n    })\n\n    feedEl.each(function(idx, ele) {\n        new InfiniteTweets(ele);\n    })\n\n    \n})"],"sourceRoot":""}